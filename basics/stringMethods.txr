ðŸŸ¢1. Basic Info & Conversion**

| Method          | Description                      | Example                     |
| --------------- | -------------------------------- | --------------------------- |
| `length`        | Returns string length            | `'Hi'.length â†’ 2`           |
| `charAt(index)` | Returns character at index       | `'Hi'.charAt(1) â†’ 'i'`      |
| `charCodeAt(i)` | Returns UTF-16 code              | `'A'.charCodeAt(0) â†’ 65`    |
| `toUpperCase()` | Convert to uppercase             | `'hi'.toUpperCase() â†’ 'HI'` |
| `toLowerCase()` | Convert to lowercase             | `'HI'.toLowerCase() â†’ 'hi'` |
| `trim()`        | Remove spaces from both ends     | `' hi '.trim() â†’ 'hi'`      |
| `trimStart()`   | Remove space at start            | `' hi'.trimStart()`         |
| `trimEnd()`     | Remove space at end              | `'hi '.trimEnd()`           |
| `toString()`    | Converts to string (from object) | `num.toString()`            |

ðŸŸ 2. Search & Check**

| Method               | Description                 | Example                          |
| -------------------- | --------------------------- | -------------------------------- |
| `includes(value)`    | Checks if substring exists  | `'hello'.includes('ell') â†’ true` |
| `startsWith(value)`  | Checks if starts with value | `'hi'.startsWith('h') â†’ true`    |
| `endsWith(value)`    | Checks if ends with value   | `'hi'.endsWith('i') â†’ true`      |
| `indexOf(value)`     | First index of substring    | `'hello'.indexOf('l') â†’ 2`       |
| `lastIndexOf(value)` | Last index of substring     | `'hello'.lastIndexOf('l') â†’ 3`   |

ðŸ”µ3. Extract & Slice**

| Method                  | Description                      | Example                           |
| ----------------------- | -------------------------------- | --------------------------------- |
| `slice(start, end?)`    | Extract part of string           | `'hello'.slice(1, 3) â†’ 'el'`      |
| `substring(start, end)` | Similar to `slice()`             | `'hello'.substring(1, 4) â†’ 'ell'` |
| `substr(start, len)`    | (Deprecated) Extract with length | `'hello'.substr(1, 2) â†’ 'el'`     |

ðŸŸ£4. Modify & Replace**

| Method                 | Description            | Example                                |
| ---------------------- | ---------------------- | -------------------------------------- |
| `replace(old, new)`    | Replaces first match   | `'aabb'.replace('a', 'x') â†’ 'xabb'`    |
| `replaceAll(old, new)` | Replaces all matches   | `'aabb'.replaceAll('a', 'x') â†’ 'xxbb'` |
| `repeat(n)`            | Repeats string n times | `'ha'.repeat(3) â†’ 'hahaha'`            |
| `padStart(len, str)`   | Pads from start        | `'5'.padStart(3, '0') â†’ '005'`         |
| `padEnd(len, str)`     | Pads from end          | `'5'.padEnd(3, '0') â†’ '500'`           |



ðŸŸ¤5. Split & Match**

| Method             | Description                         | Example                              |
| ------------------ | ----------------------------------- | ------------------------------------ |
| `split(separator)` | Splits string into array            | `'a,b,c'.split(',') â†’ ['a','b','c']` |
| `match(regex)`     | Matches regex pattern               | `'abc'.match(/[a-z]/g)`              |
| `matchAll(regex)`  | Returns all matches (with iterator) | `'test'.matchAll(/t/g)`              |
| `search(regex)`    | Searches by pattern, returns index  | `'abc'.search(/b/) â†’ 1`              |
| `join(separator)   |  Join characters with a separator   | const word = "JAVASCRIPT";
                                                             console.log(word.split('').join('-'));  
                                                             // "J-A-V-A-S-C-R-I-P-T"
  
ðŸŸ¥6. Others**

| Method               | Description                                              |
| -------------------- | -------------------------------------------------------- |
| `localeCompare(str)` | Compares strings in locale-sensitive way                 |
| `normalize()`        | Unicode normalization                                    |
| `valueOf()`          | Returns the primitive string value                       |
| `constructor`        | Returns the function that created the string's prototype |

